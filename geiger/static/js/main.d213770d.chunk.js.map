{"version":3,"sources":["layout/layout.worker.js","messaging/startListening.js","util/Events.js","graph/Cell.js","graph/label.js","graph/Node.js","util/util.js","util/Collection.js","graph/Graph.js","layout/getWorker.js","layout/layout.js","ui/computeNodeColor.js","graph/PortTypes.js","ui/renderNode.js","ui/graphStyle.js","util/roundPoint.js","util/geometry.js","ui/renderEdge.js","ui/renderGraph.js","ui/Workspace.js","ui/panZoom.js","graph/EdgeTypes.js","graph/Edge.js","ui/textSandbox.js","graph/NodeWithPort.js","iframe/iframeHandler.js","index.js"],"names":["module","exports","Worker","__webpack_public_path__","graph","Events","Object","classCallCheck","this","_events","name","callback","context","push","events","keys","forEach","handlers","remaining","filter","handler","handlersForAll","_len","arguments","length","args","Array","_key","_triggerHandlers","concat","apply","Cell","addCell","computeNodeGraphId","contextId","nodeId","computeInPortLabel","portIndex","computeOutPortLabel","computeAudioParamPortLabel","computeNodeLabel","nodeType","Node","message","_this","possibleConstructorReturn","getPrototypeOf","call","id","endsWith","slice","type","nodeLabel","_size","_pos","size","pos","noop","Collection","items","opt","_items","defaults","trackEnter","trackExit","_trackEnter","_trackExit","_enter","_exit","isArray","addItems","item","Error","set","value","add","hasOwnProperty","has","values","Graph","_nodes","_edges","_out","_in","cell","addNode","addEdge","node","_shouldRedraw","removeNode","removeEdgesOfNode","remove","_this2","outEdges","edgeId","removeEdge","inEdges","edge","sourceId","source","targetId","target","get","exit","trigger","clearEnterExit","workers","computeLayout","marginx","marginX","marginy","marginY","glLabel","rankdir","glGraph","convertToGraphlib","directed","setNodeLabel","setEdgeLabel","setGraph","afterLayout","convertBackToGraph","glSize","width","Math","abs","height","getLayoutBBox","useWorker","myWorker","LayoutWorker","onmessage","e","graphlib","json","read","data","getWorker","postMessage","write","dagre","layout","debugTiming","_node$getSize","getSize","getNodes","setNode","getEdges","setEdge","nodes","getNode","setPos","x","y","edges","edgeLabel","getEdge","setPoints","points","computeNodeColor","isOffline","PortTypes","IN","Symbol","OUT","PARAM","getOffsetXDueToPorts","offsetX","getPorts","port","createPortElement","top","left","circle","label","fabric","Circle","radius","fill","stroke","strokeWidth","Text","text","fontSize","fontFamily","INPUT_PORT_RADIUS","Group","roundPoint","point","precision","f","pow","round","getPointByDistance","from","to","distance","p1","p2","dx","dy","sqrt","calcDistance","getPointByRatio","ratio","createPathAndArrowHead","canvas","showControlPoints","controlPoints","getPoints","middlePoints","_findConnectionPoints","findConnectionPoints","sourcePoint","targetPoint","drawCircle","pathD","createRoundedPath","arrowHeadPathD","createArrowHeadPath","path","Path","selectable","arrowHead","route","control1","control2","sourceNode","sourceCenterPos","getPos","sourceSize","sourcePos","targetNode","getPortById","targetCenterPos","targetSize","targetPos","point1","point2","segment","angle","atan2","calcAngleRadian","segments","createSegment","cos","PI","sin","join","controlPoint","curr","prev","next","roundedStart","roundedEnd","index","n","getMiddle","createCurve","action","parts","renderedObjects","saveRenderedObject","obj","renderGraph","console","log","startRenderTime","performance","now","nodeGroup","setCoords","updateNode","shouldRender","elements","nodeBackground","Rect","rx","ry","nodeLabelText","LEFT_SIDE_TOP_PADDING","group","hasRotatingPoint","hasControls","selectionBackgroundColor","hoverCursor","drawNode","getNodesToRemove","edgeGroup","forEachObject","_createPathAndArrowHe2","addWithUpdate","updateEdge","_createPathAndArrowHe","hasBorders","evented","drawEdge","getEdgesToRemove","requestRenderAll","renderEnd","nodeNum","edgeNum","getObjects","Workspace","_isRedrawPending","_isUsingWorker","_shouldRedrawNext","resize","on","requestRedraw","evt","isDragging","selection","lastPosX","clientX","lastPosY","clientY","viewportTransform","delta","deltaY","zoom","getZoom","zoomToPoint","offsetY","preventDefault","stopPropagation","window","innerWidth","document","documentElement","clientWidth","innerHeight","clientHeight","_setCanvasSize","setWidth","setHeight","requestAnimationFrame","_relayout","bind","_startLayoutTime","_render","bbox","EdgeTypes","Edge","_points","_init","JSON","stringify","sourcePortLabel","destinationPortLabel","sourceNodeId","destinationNodeId","fromChannel","toChannel","destinationParamName","textSandbox","TextSandbox","elemId","elem","getElementById","createElement","setAttribute","body","appendChild","className","classList","textContent","NodeWithPort","_ports","_computeNodeLayout","inputPorts","_prepareInputPorts","outputPorts","_prepareOutputPorts","paramPorts","_prepareParamPorts","_createPortData","setSize","maxTextLength","totalHeight","inputPortSectionHeight","max","numberOfInputs","paramPortSectionHeight","AUDIO_PARAM_RADIUS","audioParamNames","leftSideBottomPadding","numberOfOutputs","_computeMaxTextLength","start","i","setText","stop","ports","inputPortY","audioParamY","err","_validatePorts","errorMessages","p","_isValidPortId","undefined","isObject","toggleBtn","iframe","Canvas","ws","addEventListener","init","event","eventType","addTo","removeNodeAndEdges","contains"],"mappings":"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","file":"static/js/main.d213770d.chunk.js","sourcesContent":["module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"c83ae2de066ce6fe08ee.worker.js\");\n};","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Edge from '../graph/Edge';\nimport { EdgeTypes } from '../graph/EdgeTypes';\nimport { computeNodeGraphId } from '../graph/label';\nimport NodeWithPort from '../graph/NodeWithPort';\n\n/**\n * Listens to audio context change, and then updates the graph accordingly.\n */\nexport const startListening = (graph) => {\n\n  // Listen to the message sent from the iframe of demo page\n  window.addEventListener('message', (event) => {\n    const message = event.data;\n    let edge;\n    switch (message.eventType) {\n      case 'KNodeCreated':\n        const node = new NodeWithPort(message);\n        node.addTo(graph);\n        break;\n      case 'kNodeDestroyed':\n        const nodeId = computeNodeGraphId(message.contextId, message.nodeId);\n        graph.removeNodeAndEdges(nodeId);\n        break;\n      case 'KNodesConnected':\n        edge = new Edge(message, EdgeTypes.NODE_TO_NODE);\n        edge.addTo(graph);\n        break;\n      case 'kNodeParamConnected':\n        edge = new Edge(message, EdgeTypes.NODE_TO_PARAM);\n        edge.addTo(graph);\n        break;\n      default:\n        break;\n    }\n  })\n\n}\n","// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\n\n/**\n * A module that can be extended into other classes to equip with\n * 'on', 'off', and 'trigger' features.\n */\nexport default class Events {\n  constructor() {\n\n    /**\n     * A mapping from event name to a list of event handlers.\n     * @private !Object<string, Array>\n     */\n    this._events = {};\n  }\n\n  /**\n   * Bind an event to a callback function.\n   * If the name is \"all\", it will listen to all events.\n   */\n  on(name, callback, context) {\n    if (!name || !callback) return this;\n\n    const handlers = this._events[name] || (this._events[name] = []);\n    handlers.push({ callback, context: context || this });\n\n    return this;\n  }\n\n  /**\n   * Remove one or many callbacks.\n   * If `name` is null, removes all callbacks for all events\n   * If `callback` is null, removes all callbacks for the event\n   */\n  off(name, callback) {\n    if (!this._events) return this;\n\n    const events = this._events;\n    const names = name ? [name] : Object.keys(events);\n    names.forEach(name => {\n      const handlers = events[name];\n\n      // the event name does not exist\n      if (!handlers) return;\n\n      // remove all callbacks for the event\n      if (!callback) {\n        delete events[name];\n        return;\n      }\n\n      const remaining = handlers.filter(handler => handler.callback !== callback);\n      events[name] = remaining;\n    })\n\n    return this;\n  }\n\n  /**\n   * Trigger events based on name and pass `args` to callback(s).\n   * If `name` is null, do nothing;\n   * Since `on(\"all\")` is allowed, when an event is triggered,\n   * we also fire all the callback(s) bound to \"all\"\n   */\n  trigger(name, ...args) {\n    if (!this._events || !name) return this;\n\n    const handlers = this._events[name];\n    const handlersForAll = this._events[\"all\"];\n\n    if (handlers) {\n      this._triggerHandlers(handlers, args);\n    }\n\n    if (handlersForAll) {\n      this._triggerHandlers(handlersForAll, [name].concat(args));\n    }\n\n    return this;\n  }\n\n  /** @private */\n  _triggerHandlers(handlers, args) {\n    handlers.forEach(handler => {\n      handler.callback.apply(handler.context, args);\n    })\n  }\n}\n","/**\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A Cell of graph could be Node or Edge. They all have property `graph`.\n */\nexport default class Cell {\n  constructor() {\n    this.graph = null;\n  }\n\n  addTo(graph) {\n    this.graph = graph;\n    graph.addCell(this);\n    return this;\n  }\n\n}","/**\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n /**\n * Computes the label for a node.\n * @param {number} contextId\n * @param {number} nodeId\n * @return {string}\n */\nexport const computeNodeGraphId = (contextId, nodeId) => {\n  return 'c' + contextId + 'n' + nodeId;\n};\n\nexport const computeInPortLabel = (contextId, nodeId, portIndex) => {\n  return computeNodeGraphId(contextId, nodeId) + 'input' + portIndex;\n}\n\nexport const computeOutPortLabel = (contextId, nodeId, portIndex) => {\n  return computeNodeGraphId(contextId, nodeId) + 'output' + portIndex;\n}\n\nexport const computeAudioParamPortLabel = (contextId, nodeId, name) => {\n  return computeNodeGraphId(contextId, nodeId) + '$param$' + name;\n}\n\nexport const computeNodeLabel = (nodeType, nodeId) => {\n  return nodeType + ' ' + nodeId;\n}\n\nexport const computeEdgeLabel = (sourcePortLabel, destinationPortLabel) => {\n  return sourcePortLabel + '|' + destinationPortLabel;\n}","/**\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Cell from \"./Cell\";\nimport { computeNodeGraphId, computeNodeLabel } from \"./label\";\n\n\nexport default class Node extends Cell {\n\n  constructor(message) {\n    super();\n\n    this.id = computeNodeGraphId(message.contextId, message.nodeId);\n    \n    let nodeType = message.nodeType;\n    if (nodeType.endsWith('Node')) {\n      nodeType = nodeType.slice(0, nodeType.length-4);\n    }\n    this.type = nodeType;\n    this.nodeLabel = computeNodeLabel(nodeType, message.nodeId)\n\n    this._size = null;\n    this._pos = null;   // position of the center\n  }\n\n  getSize() {\n    return this._size;\n  }\n\n  setSize(size) {\n    this._size = size;\n  }\n\n  getPos() {\n    return this._pos;\n  }\n\n  setPos(pos) {\n    this._pos = pos;\n    return this;\n  }\n\n  shouldRender() {\n    return !!this._pos;\n  }\n\n}","export const isObject = function (value) {\n  return !!value && (typeof value === 'object' || typeof value === 'function');\n};\n\nexport const isEmptyArray = (arr) => !arr || arr.length === 0;\n\nexport const noop = () => { }\n\nexport const sum = (arr) => arr.reduce((res, x) => res + x, 0);\n","import { isArray } from \"util\";\nimport defaults from 'lodash.defaults'\nimport { isObject } from './util';\n\n/**\n * A module that supports fast add/remove/get by id.\n * So far, it is just a dictionary, may be updated later.\n * Optionally, it can track the newly added elements and newly removed ones.\n */\nexport default class Collection {\n  constructor(items, opt) {\n    /**\n     * A mapping from event name to a list of event handlers.\n     * @private {!Object<string, Item>}\n     */\n    this._items = {};\n\n    opt = defaults(opt, { trackEnter: false, trackExit: false });\n\n    this._trackEnter = opt.trackEnter;\n    this._trackExit = opt.trackExit;\n\n    if (opt.trackEnter) {\n      /**\n       * Store all newly added items, reset by `clearEnterExit`\n       * @private {!Array<Item>}\n       */\n      this._enter = [];\n    }\n\n    if (opt.trackExit) {\n      /**\n       * Store all removed items, reset by `clearEnterExit`\n       * @private {!Array<Item>}\n       */\n      this._exit = [];\n    }\n\n    if (items && isArray(items)) {\n      this.addItems(items);\n    }\n  }\n\n  add(id, item) {\n    if (arguments.length !== 2) {\n      throw new Error('Should have two arguments, but got: ' + arguments.length);\n    }\n    if (typeof id === 'undefined') {\n      throw new Error('id should not be undefined');\n    }\n    if (this._trackEnter) {\n      this._enter.push(item);\n    }\n    this.set(id, item);\n    return this;\n  }\n\n  addItems(items) {\n    items.forEach(item => {\n      if (isObject(item)) {\n        this.add(item.id, item);\n      }\n    })\n  }\n\n  has(id) {\n    return this._items.hasOwnProperty(id);\n  }\n\n  get(id) {\n    return this._items[id];\n  }\n\n  set(id, item) {\n    this._items[id] = item;\n    return this;\n  }\n\n  remove(id) {\n    if (!this.has(id)) {\n      return false;\n    }\n    if (this._trackExit) {\n      this._exit.push(this._items[id]);\n    }\n    delete this._items[id];\n    return true;\n  }\n\n  values() {\n    return Object.values(this._items);\n  }\n\n  size() {\n    return Object.keys(this._items).length;\n  }\n\n  enter() {\n    if (!this._trackEnter) {\n      throw new Error('Should set trackEnter=true')\n    }\n    return this._enter;\n  }\n\n  exit() {\n    if (!this._trackExit) {\n      throw new Error('Should set trackExit=true')\n    }\n    return this._exit;\n  }\n\n  /** Clear the enter and exit */\n  clearEnterExit() {\n    if (this._trackEnter) {\n      this._enter = [];\n    }\n    if (this._trackExit) {\n      this._exit = [];\n    }\n  }\n\n}\n","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Events from \"../util/Events\";\nimport Node from \"./Node\";\nimport Collection from \"../util/Collection\";\n\n\nexport default class Graph extends Events {\n  constructor() {\n    super();\n\n    this._nodes = new Collection(null, { trackExit: true });\n    this._edges = new Collection(null, { trackExit: true });\n\n    /**\n     * For each node ID, keep track of all out-bound edge IDs\n     * @private {!Object<string, !Object<string, true>>}\n     */\n    this._out = {};\n\n    /**\n     * For each node ID, keep track of all in-bound edge IDs\n     * @private {!Object<string, !Object<string, true>>}\n     */\n    this._in = {};\n  }\n\n  addCell(cell) {\n    if (cell instanceof Node) {\n      this.addNode(cell)\n    } else {\n      this.addEdge(cell)\n    }\n  }\n\n  addNode(node) {\n    this._nodes.add(node.id, node);\n    this._shouldRedraw();\n  }\n\n  /** When remove a node, remove all related edges as well. */\n  removeNodeAndEdges(nodeId) {\n    this.removeNode(nodeId);\n    this.removeEdgesOfNode(nodeId);\n  }\n\n  removeNode(nodeId) {\n    this._nodes.remove(nodeId);\n    this._shouldRedraw();\n  }\n\n  removeEdgesOfNode(nodeId) {\n    const outEdges = this._out[nodeId];\n    if (outEdges) {\n      Object.keys(outEdges).forEach(edgeId => {\n        this.removeEdge(edgeId)\n      })\n    }\n    const inEdges = this._in[nodeId];\n    if (inEdges) {\n      Object.keys(inEdges).forEach(edgeId => {\n        this.removeEdge(edgeId)\n      })\n    }\n    delete this._out[nodeId];\n    delete this._in[nodeId];\n  }\n\n  addEdge(edge) {\n    const sourceId = edge.source.id;\n    if (this._out[sourceId] && this._out[sourceId][edge.id]) {\n      // This link exists.\n      return;\n    }\n    this._edges.add(edge.id, edge);\n\n    if (!this._out[sourceId]) {\n      this._out[sourceId] = {};\n    }\n    this._out[sourceId][edge.id] = true;\n\n    const targetId = edge.target.id;\n    if (!this._in[targetId]) {\n      this._in[targetId] = {};\n    }\n    this._in[targetId][edge.id] = true;\n\n    this._shouldRedraw();\n  }\n\n  removeEdge(edgeId) {\n    const edge = this._edges.get(edgeId);\n    if (!edge) return;\n\n    const sourceId = edge.source.id;\n    if (this._out[sourceId] && this._out[sourceId][edgeId]) {\n      delete this._out[sourceId][edgeId];\n    }\n\n    const targetId = edge.target.id;\n    if (this._in[targetId] && this._in[targetId][edgeId]) {\n      delete this._in[targetId][edgeId];\n    }\n\n    this._edges.remove(edgeId);\n    this._shouldRedraw();\n  }\n\n  getNodes() {\n    return this._nodes.values();\n  }\n\n  getNodesToRemove() {\n    return this._nodes.exit();\n  }\n\n  getNode(nodeId) {\n    return this._nodes.get(nodeId)\n  }\n\n  getEdges() {\n    return this._edges.values();\n  }\n\n  getEdgesToRemove() {\n    return this._edges.exit();\n  }\n\n  getEdge(edgeId) {\n    return this._edges.get(edgeId);\n  }\n\n  _shouldRedraw() {\n    this.trigger('shouldRedraw');\n  }\n\n  renderEnd() {\n    this._nodes.clearEnterExit();\n    this._edges.clearEnterExit();\n  }\n}\n","\nimport graphlib from 'graphlib';\nimport LayoutWorker from './layout.worker';\n\n\nconst workers = [];\nexport const getWorker = (callback) => {\n  // so far, just use one worker\n  if (workers.length) {\n    return workers[0];\n  }\n\n  const myWorker = new LayoutWorker();\n  myWorker.onmessage = function(e) {\n    // restore the graph from serialized string\n    const glGraph =  graphlib.json.read(e.data);\n    callback(glGraph)\n  }\n  workers.push(myWorker);\n  return myWorker;\n}\n","import defaults from 'lodash.defaults'\nimport dagre from 'dagre';\nimport { noop } from \"../util/util\";\nimport graphlib from 'graphlib';\nimport { getWorker } from './getWorker';\n\nexport const computeLayout = (graph, opt) => {\n  opt = defaults(opt || {callback: noop});\n  \n  // the attrs names of dagre are all lowercase\n  const marginx = opt.marginX || 0;\n  const marginy = opt.marginY || 0;\n  \n  const glLabel = {\n    rankdir: 'LR',\n    marginx,\n    marginy\n  };\n  \n  const glGraph = convertToGraphlib(graph, {\n    directed: true,\n    setNodeLabel,\n    setEdgeLabel,\n  });\n\n  glGraph.setGraph(glLabel);\n\n  const afterLayout = (glGraph) => {\n    convertBackToGraph(glGraph, graph, opt);\n    opt.callback(getLayoutBBox(glGraph));\n  }\n  \n  if (opt.useWorker) {\n    const myWorker = getWorker(afterLayout);\n    // serialize the graph as string and send to worker\n    myWorker.postMessage(graphlib.json.write(glGraph));\n  } else {\n    dagre.layout(glGraph, {debugTiming: true});\n    afterLayout(glGraph);\n  }\n\n  function getLayoutBBox(glGraph) {\n    // Width and height of the graph extended by margins.\n    const glSize = glGraph.graph();\n    // Return the bounding box of the graph after the layout.\n    return {\n      marginx,\n      marginy,\n      width: Math.abs(glSize.width - 2 * marginx),\n      height: Math.abs(glSize.height - 2 * marginy)\n    };\n  }\n}\n\nconst setNodeLabel = (node) => {\n  const {width, height} = node.getSize();\n  return {width, height};\n}\n\nconst setEdgeLabel = (edge) => {\n  return {id: edge.id};\n}\n\nconst convertToGraphlib = (graph, opt) => {\n  const glGraph = new dagre.graphlib.Graph();\n\n  const setNodeLabel = opt.setNodeLabel || noop;\n  const setEdgeLabel = opt.setEdgeLabel || noop;\n\n  graph.getNodes().forEach(node => {\n    glGraph.setNode(node.id, setNodeLabel(node));\n  })\n\n  graph.getEdges().forEach(edge => {\n    glGraph.setEdge(edge.source.id, edge.target.id, setEdgeLabel(edge))\n  })\n\n  return glGraph;\n}\n\nconst convertBackToGraph = (glGraph, graph) => {\n\n  glGraph.nodes().forEach(nodeId => {\n    const nodeLabel = glGraph.node(nodeId);\n    // by default, the node position of dagre layout is the center position\n    graph.getNode(nodeId).setPos({\n      x: nodeLabel.x,\n      y: nodeLabel.y,\n    });\n    // console.log(\"Node \" + nodeId + \": \" + JSON.stringify(nodeLabel));\n  })\n\n  glGraph.edges().forEach(edge => {\n    const edgeLabel = glGraph.edge(edge);\n\n    // save the control points of curve\n    graph.getEdge(edgeLabel.id).setPoints(edgeLabel.points);\n    // console.log(\"Edge \" + edge.v + \" -> \" + edge.w  + \": \" + JSON.stringify(edgeLabel));\n  })\n\n}","\n/**\n * Computes the color that should be used to visualize an AudioNode.\n * @param {!string} nodeType The type of the node. With the Node suffix removed.\n * @param {boolean} [isOffline] Whether this node pertains to an\n *     OfflineAudioContext.\n * @return {string} The hex color used to visualize the AudioNode.\n */\nexport const computeNodeColor = function(nodeType, isOffline) {\n  // AudioNodes are grouped into color categories based on their purposes.\n  switch (nodeType) {\n    case 'AudioDestination':\n      // The destination nodes of OfflineAudioContexts are brown. Those of\n      // \"non-offline\" AudioContexts are a dark grey.\n      return isOffline ? '#5D4037' : '#37474F';\n    case 'AudioBufferSource':\n    case 'Oscillator':\n      return '#009688';\n    case 'BiquadFilter':\n    case 'Convolver':\n    case 'Delay':\n    case 'DynamicsCompressor':\n    case 'IIRFilter':\n    case 'Panner':\n    case 'StereoPanner':\n    case 'WaveShaper':\n      return '#2196F3';\n    case 'Analyser':\n      return '#00BCD4';\n    case 'Gain':\n    case 'ChannelMerger':\n    case 'ChannelSplitter':\n      return '#3F51B5';\n    case 'MediaElementAudioSource':\n    case 'MediaStreamAudioDestination':\n    case 'MediaStreamAudioSource':\n      return '#9C27B0';\n    case 'ScriptProcessor':\n      return '#C62828';\n    default:\n      // Nothing matched. Odd. Highlight this node in dark red.\n      return '#C62828';\n  }\n};","\n\n/**\n * Supported port types.\n * @enum {string}\n */\nexport const PortTypes = {\n  IN: Symbol('IN'),\n  OUT: Symbol('OUT'),\n  PARAM: Symbol('PARAM')\n}","import { fabric } from 'fabric';\nimport { computeNodeColor } from \"./computeNodeColor\";\nimport { LEFT_TEXT_INDENT, LEFT_SIDE_TOP_PADDING, INPUT_PORT_RADIUS, INPUT_PORT_COLOR, OUTPUT_PORT_COLOR, AUDIO_PARAM_RADIUS, PARAM_PORT_COLOR, PORT_PADDING } from './graphStyle';\nimport { PortTypes } from '../graph/PortTypes';\n\n/**\n * @typedef {import('../graph/NodeWithPort').default} Node\n */\n\n/**\n * Use fabric.js to draw the node and text.\n * @param {!fabric.Canvas} canvas\n * @param {!Node} node\n */\nexport const drawNode = (canvas, node) => {\n  const pos = node.getPos();\n  const size = node.getSize();\n\n  const elements = [];\n\n  const nodeBackground = new fabric.Rect({\n    fill: computeNodeColor(node.type),\n    width: size.width,\n    height: size.height,\n    rx: 5,\n    ry: 5,\n  });\n  elements.push(nodeBackground);\n\n  const nodeLabelText = new fabric.Text(node.nodeLabel, {\n    fontSize: 14,\n    fontFamily: \"Segoe UI, sans-serif\",\n    fill: '#fff',\n    left: LEFT_TEXT_INDENT,\n    top: LEFT_SIDE_TOP_PADDING + PORT_PADDING,\n  })\n  elements.push(nodeLabelText)\n\n  node.getPorts().forEach(port => {\n    elements.push(createPortElement(port, size));\n  })\n\n  const offsetX = getOffsetXDueToPorts(node);\n  // use a group to hold labels, ports.\n  // so the position of children can be relative\n  const group = new fabric.Group(elements, {\n    id: node.id,\n    // round the position such that text will be not blurry\n    left: Math.round(pos.x - size.width / 2 - offsetX),\n    top: Math.round(pos.y - size.height / 2),\n    hasRotatingPoint: false,\n    hasControls: false,\n    selectionBackgroundColor: 'orange',\n    hoverCursor: \"pointer\",\n  })\n  canvas.add(group);\n\n  return group;\n}\n\n/**\n * Update the position of the group that contains node and text.\n * @param {!fabric.Group} nodeGroup\n * @param {!Node} node\n */\nexport const updateNode = (nodeGroup, node) => {\n  const pos = node.getPos();\n  const size = node.getSize();\n\n  const offsetX = getOffsetXDueToPorts(node);\n\n  // round the position such that text will be not blurry\n  nodeGroup.set({\n    left: Math.round(pos.x - size.width / 2 - offsetX),\n    top: Math.round(pos.y - size.height / 2),\n  })\n  nodeGroup.setCoords();\n\n  return nodeGroup;\n}\n\nconst getOffsetXDueToPorts = (node) => {\n  // adding ports on the left side of the node will add some offset.\n  // since all the objects of the node are rendered as a group,\n  // the position of the group should minus this offset to make\n  // sure all the objects are still at the right position\n  let offsetX = 0;\n  node.getPorts().forEach(port => {\n    if (port.type === PortTypes.IN) {\n      offsetX = INPUT_PORT_RADIUS;\n    } else if (port.type === PortTypes.PARAM && offsetX === 0) {\n      offsetX = AUDIO_PARAM_RADIUS;\n    }\n  })\n  return offsetX;\n}\n\nconst createPortElement = (port, size) => {\n  let top, left;\n  let circle, label;\n\n  switch (port.type) {\n    case PortTypes.IN:\n      top = LEFT_SIDE_TOP_PADDING;\n      left = -INPUT_PORT_RADIUS;\n      circle = new fabric.Circle({\n        radius: INPUT_PORT_RADIUS,\n        fill: INPUT_PORT_COLOR,\n        top,\n        left,\n        stroke: 'black',\n        strokeWidth: 1,\n      });\n      label = new fabric.Text(port.text, {\n        fontSize: 14,\n        fontFamily: \"Segoe UI, sans-serif\",\n        fill: 'black',\n        top: top + INPUT_PORT_RADIUS / 4,\n        left: left + 6,\n      });\n      break;\n    case PortTypes.OUT:\n      top = size.height / 2 - INPUT_PORT_RADIUS;\n      left = size.width - INPUT_PORT_RADIUS;\n      circle = new fabric.Circle({\n        radius: INPUT_PORT_RADIUS,\n        fill: OUTPUT_PORT_COLOR,\n        top,\n        left,\n        stroke: 'black',\n        strokeWidth: 1,\n      });\n      label = new fabric.Text(port.text, {\n        fontSize: 14,\n        fontFamily: \"Segoe UI, sans-serif\",\n        fill: 'black',\n        left: left + 6,\n        top: top + INPUT_PORT_RADIUS / 4,\n      });\n      break;\n    case PortTypes.PARAM:\n      circle = new fabric.Circle({\n        radius: AUDIO_PARAM_RADIUS,\n        fill: PARAM_PORT_COLOR,\n        top: (port.y || 0) - AUDIO_PARAM_RADIUS,\n        left: 0 - AUDIO_PARAM_RADIUS,\n        stroke: 'black',\n        strokeWidth: 1,\n      });\n\n      label = new fabric.Text(port.text, {\n        fontSize: 12,\n        fontFamily: \"Segoe UI, sans-serif\",\n        fill: '#eee',\n        left: LEFT_TEXT_INDENT,\n        top: (port.y || 0) - AUDIO_PARAM_RADIUS - 2,\n      });\n      break;\n    default:\n      throw new Error('should not reach here')\n  }\n\n  return new fabric.Group([circle, label], {\n\n  });\n}\n\n\n/**\n * Use native context API.\n * @deprecated\n */\nexport const drawNodeNativeWay = (context, node) => {\n  const pos = node.getPos();\n  const size = node.getSize();\n\n  context.fillStyle = computeNodeColor(node.type);\n  context.fillRect(pos.x, pos.y, size.width, size.height);\n\n  context.font = \"14px Georgia\";  // remember to be the same size of textSandbox.css\n  context.fillStyle = 'red';\n  console.log(node.nodeLabel)\n  context.fillText(node.nodeLabel, pos.x, pos.y + 14);\n}\n","\nexport const PORT_PADDING = 4;\nexport const INPUT_PORT_RADIUS = 10;\nexport const TOTAL_INPUT_PORT_HEIGHT = INPUT_PORT_RADIUS * 2 + PORT_PADDING;\nexport const AUDIO_PARAM_RADIUS = 5;\nexport const TOTAL_PARAM_PORT_HEIGHT = AUDIO_PARAM_RADIUS * 2 + PORT_PADDING;\nexport const LEFT_TEXT_INDENT = 12;\nexport const LEFT_SIDE_TOP_PADDING = 5;\n\nexport const INPUT_PORT_COLOR = 'green';\nexport const OUTPUT_PORT_COLOR = 'red';\nexport const PARAM_PORT_COLOR = 'yellow';\n\nexport const ARROW_HEAD_SIZE = 12;","\nexport const round = (x, precision) => {\n  var f = Math.pow(10, precision || 0);\n  return Math.round(x * f) / f;\n}\n\n/**\n * Round a point to a given precision\n */\nexport const roundPoint = (point, precision) => {\n  var f = Math.pow(10, precision || 0);\n  point.x = Math.round(point.x * f) / f;\n  point.y = Math.round(point.y * f) / f;\n  return point;\n}","// return angle in radians\nexport const calcAngleRadian = (from, to) => {\n  // inverse y-axis\n  const dy = -(to.y - from.y);\n  const dx = to.x - from.x;\n  return Math.atan2(dy, dx);\n};\n// return angle in degrees\nexport const calcAngleDegrees = (from, to) => {\n  // inverse y-axis\n  const dy = -(to.y - from.y);\n  const dx = to.x - from.x;\n  return Math.atan2(dy, dx) * 180 / Math.PI;\n};\nexport const calcDistance = (p1, p2) => {\n  const dx = p1.x - p2.x;\n  const dy = p1.y - p2.y;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n/**\n * Find the point on the line from `from` to `to`, in which\n * the distance between the `from` and the point is `distance`\n */\nexport const getPointByDistance = (from, to, distance) => {\n  const length = calcDistance(from, to);\n  if (length === 0) {\n    throw new Error('from should not be the same as to');\n  }\n  const ratio = distance / length;\n  return getPointByRatio(from, to, ratio);\n};\nexport const getPointByRatio = (from, to, ratio) => {\n  return {\n    x: from.x + (to.x - from.x) * ratio,\n    y: from.y + (to.y - from.y) * ratio\n  };\n};\n","import defaults from 'lodash.defaults'\nimport { fabric } from 'fabric';\nimport { PortTypes } from '../graph/PortTypes';\nimport { roundPoint } from '../util/roundPoint';\nimport { calcAngleRadian, getPointByDistance } from \"../util/geometry\";\nimport { ARROW_HEAD_SIZE, AUDIO_PARAM_RADIUS, INPUT_PORT_RADIUS } from './graphStyle';\n\n/**\n * Use fabric.js to draw the edge.\n * @param {!fabric.Canvas} canvas\n * @param {!Edge} edge\n * @param {!Graph} graph\n * @param {?Object} opt\n */\nexport const drawEdge = (canvas, edge, graph, opt) => {\n\n  const { path, arrowHead } = createPathAndArrowHead(graph, edge, canvas, opt);\n\n  const group = new fabric.Group([path, arrowHead], {\n    id: edge.id,\n    hasRotatingPoint: false,\n    hasControls: false,\n    hasBorders: false,\n    // selectable: false,  // even selectable=false, the event will stop propagation\n    evented: false,  // use evented=false to truely allow event propagation\n  })\n\n  canvas.add(group);\n  return group;\n};\n\n\nexport const updateEdge = (edgeGroup, edge, graph) => {\n\n  // remove the old path, add new path\n  // @see https://stackoverflow.com/questions/35436344/fabricjs-the-bounding-box-of-a-path-not-get-update-when-i-change-path-coordinat\n  edgeGroup.forEachObject(obj => {\n    edgeGroup.remove(obj);\n  })\n\n  const { path, arrowHead } = createPathAndArrowHead(graph, edge);\n\n  edgeGroup.addWithUpdate(path);\n  edgeGroup.addWithUpdate(arrowHead);\n\n  return edgeGroup;\n};\n\nconst createPathAndArrowHead = (graph, edge, canvas, opt) => {\n\n  opt = defaults(opt, { showControlPoints: false });\n\n  const controlPoints = edge.getPoints();\n\n  // remove the first and last point\n  const middlePoints = controlPoints ? controlPoints.slice(1, controlPoints.length - 1) : [];\n  // specify our own source and target points\n  const { sourcePoint, targetPoint } = findConnectionPoints(graph, edge, middlePoints);\n\n  if (canvas && opt.showControlPoints) {\n    drawCircle(canvas, sourcePoint, { fill: 'blue' })\n    drawCircle(canvas, targetPoint, { fill: 'purple' })\n    middlePoints.forEach(point => {\n      drawCircle(canvas, point)\n    })\n  }\n\n  const pathD = createRoundedPath(sourcePoint, targetPoint, middlePoints);\n  const arrowHeadPathD = createArrowHeadPath(sourcePoint, targetPoint, middlePoints);\n\n  const path = new fabric.Path(pathD, {\n    fill: '',\n    stroke: 'black',\n    strokeWidth: 1.5,\n    selectable: false,\n  });\n\n  const arrowHead = new fabric.Path(arrowHeadPathD, {\n    fill: 'black',\n    selectable: false,\n  });\n\n  return { path, arrowHead, sourcePoint, targetPoint }\n}\n\n/**\n * Find the intersection point between the port and the link.\n */\nconst findConnectionPoints = (graph, edge, route) => {\n  const source = edge.source;\n  /** @TODO consider the port of source node */\n  const sourceNode = graph.getNode(source.id);\n  const sourceCenterPos = sourceNode.getPos();\n  const sourceSize = sourceNode.getSize();\n  const sourcePos = {\n    x: sourceCenterPos.x + sourceSize.width / 2,\n    y: sourceCenterPos.y\n  }\n\n  const target = edge.target;\n  const targetNode = graph.getNode(target.id);\n  const port = targetNode.getPortById(target.port);\n  const targetCenterPos = targetNode.getPos();\n  const targetSize = targetNode.getSize();\n  const targetPos = {\n    x: targetCenterPos.x - targetSize.width / 2,\n    y: targetCenterPos.y - targetSize.height / 2 + port.y,\n  }\n\n  let control1, control2;\n  if (route.length) {\n    control1 = route[0];\n    control2 = route[route.length - 1]\n  } else {\n    control1 = targetPos;\n    control2 = sourcePos;\n  }\n\n  // find the intersection between the line from source to next\n  // and the circle of source port\n  const point1 = getPointByDistance(sourcePos, control1, INPUT_PORT_RADIUS);\n  // determine distance by port.type\n  const distance = port.type === PortTypes.IN ? INPUT_PORT_RADIUS : AUDIO_PARAM_RADIUS;\n  const point2 = getPointByDistance(targetPos, control2, distance);\n  return {\n    sourcePoint: roundPoint(point1),\n    targetPoint: roundPoint(point2)\n  }\n}\n\nconst createArrowHeadPath = (sourcePoint, targetPoint, route) => {\n  const lastMiddlePoint = route && route.length\n    ? route[route.length - 1]\n    : sourcePoint;\n\n  const angle = calcAngleRadian(lastMiddlePoint, targetPoint);\n  const segments = [];\n  let segment;\n\n  segment = createSegment('M', targetPoint);\n  segments.push(segment);\n\n  segment = createSegment('L', {\n    x: targetPoint.x - ARROW_HEAD_SIZE * Math.cos(-angle - Math.PI / 6),\n    y: targetPoint.y - ARROW_HEAD_SIZE * Math.sin(-angle - Math.PI / 6),\n  });\n  segments.push(segment);\n\n  segment = createSegment('L', {\n    x: targetPoint.x - ARROW_HEAD_SIZE * Math.cos(-angle + Math.PI / 6),\n    y: targetPoint.y - ARROW_HEAD_SIZE * Math.sin(-angle + Math.PI / 6),\n  });\n  segments.push(segment);\n\n  segments.push('Z');\n\n  return segments.join(' ');\n}\n\n/** For debug */\nconst drawCircle = (canvas, point, opt) => {\n  opt = opt || {};\n  const radius = opt.radius || 3;\n\n  const controlPoint = new fabric.Circle({\n    radius: radius,\n    fill: opt.fill || 'black',\n    top: point.y - radius,\n    left: point.x - radius,\n  })\n  canvas.add(controlPoint)\n}\n\n// const getTargetPoint = (graph, edge, route) => {\n//   const target = edge.target;\n\n//   const node = graph.getNode(target.id);\n//   const port = node.getPortById(target.port);\n\n//   const pos = node.getPos();\n//   const size = node.getSize();\n//   const targetPos = {\n//     x: pos.x - size.width/2,\n//     y: pos.y - size.height/2 + port.y,\n//   }\n\n//   const prev = route[route.length - 1];\n//   // find the intersection between the line from source to next\n//   // and the circle of source port\n//   return roundPoint({\n//     x: pos.x - size.width/2,\n//     y: pos.y - size.height/2 + port.y,\n//   })\n// }\n\n/**\n * Create a path by using all points.\n */\n// const createPath = (controlPoints) => {\n//   const segments = [];\n\n//   segments.push(createSegment('M', controlPoints[0]));\n//   segments.push(createCurve(controlPoints))\n//   return segments.join(' ')\n// }\n\n/**\n * Create a path from source to target. For better look, round the path.\n * @credit inspired by https://github.com/clientIO/joint/blob/master/src/connectors/rounded.mjs\n */\nconst createRoundedPath = (sourcePoint, targetPoint, route) => {\n\n  // const offset = 10;\n  const segments = [];\n  let segment;\n\n  segment = createSegment('M', sourcePoint)\n  segments.push(segment);\n\n  const _13 = 1 / 3;\n  const _23 = 2 / 3;\n\n  let curr;\n  let prev, next;\n  let roundedStart, roundedEnd;\n  let control1, control2;\n\n  for (let index = 0, n = route.length; index < n; index++) {\n\n    curr = route[index];\n\n    prev = route[index - 1] || sourcePoint;\n    next = route[index + 1] || targetPoint;\n\n    roundedStart = getMiddle(prev, curr)\n    roundedEnd = getMiddle(curr, next)\n\n    control1 = { x: (_13 * roundedStart.x) + (_23 * curr.x), y: (_23 * curr.y) + (_13 * roundedStart.y) };\n    control2 = { x: (_13 * roundedEnd.x) + (_23 * curr.x), y: (_23 * curr.y) + (_13 * roundedEnd.y) };\n\n    segment = createSegment('L', roundedStart);\n    segments.push(segment);\n\n    segment = createCurve([control1, control2, roundedEnd]);\n    segments.push(segment);\n  }\n\n  segment = createSegment('L', targetPoint);\n  segments.push(segment);\n\n  return segments.join(' ');\n\n}\n\nconst createSegment = (action, point) => {\n  return action + ' ' + point.x + ' ' + point.y;\n}\n\nconst createCurve = (points) => {\n  if (points.length !== 3) {\n    throw new Error('should be 3 points but got ', points.length);\n  }\n  const parts = [];\n  parts.push('C')\n  points.forEach(point => {\n    parts.push(point.x);\n    parts.push(point.y);\n  })\n  return parts.join(' ')\n}\n\nconst getMiddle = (p1, p2) => {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2\n  }\n}\n","import { drawNode, updateNode } from \"./renderNode\";\nimport { drawEdge, updateEdge } from \"./renderEdge\";\nimport Collection from \"../util/Collection\";\n\n/** Keep track of all groups/objects rendered by fabric.js */\nconst renderedObjects = new Collection();\n\nconst saveRenderedObject = (obj) => {\n  if (obj && obj.id) {\n    renderedObjects.add(obj.id, obj);\n  } else {\n    throw new Error('rendered object is not returned or does not have id')\n  }\n}\n\nexport const renderGraph = (canvas, graph) => {\n  console.log('start render...')\n  const startRenderTime = performance.now();\n\n  // update existing node or add new\n  graph.getNodes().forEach(node => {\n    let obj;\n    if (renderedObjects.has(node.id)) {\n      // update existing node\n      obj = renderedObjects.get(node.id);\n      updateNode(obj, node);\n    } else {\n      // add new node\n      // it is possible that new nodes are added after the layout,\n      // but before rendering in the next frame,\n      // so those new nodes do not have position and should not render\n      if (node.shouldRender()) {\n        obj = drawNode(canvas, node);\n        saveRenderedObject(obj);\n      }\n    }\n  });\n  graph.getNodesToRemove().forEach(node => {\n    const obj = renderedObjects.get(node.id);\n    canvas.remove(obj);\n    renderedObjects.remove(node.id);\n  })\n\n  // update existing edge or add new\n  graph.getEdges().forEach(edge => {\n    let obj;\n    if (renderedObjects.has(edge.id)) {\n      // update existing edge\n      obj = renderedObjects.get(edge.id);\n      updateEdge(obj, edge, graph);\n    } else {\n      // add new edge\n      // it is possible that new edges are added after the layout\n      // but before rendering in the next frame,\n      // so those new edges do not have position and should not render\n      if (edge.shouldRender()) {\n        obj = drawEdge(canvas, edge, graph);\n        saveRenderedObject(obj);\n      }\n    }\n  });\n  graph.getEdgesToRemove().forEach(edge => {\n    const obj = renderedObjects.get(edge.id);\n    canvas.remove(obj);\n    renderedObjects.remove(edge.id);\n  });\n\n  canvas.requestRenderAll();\n  graph.renderEnd();\n\n  console.log('finish render, time spent: ',\n    (performance.now() - startRenderTime) / 1000, 's')\n\n  const nodeNum = graph.getNodes().length;\n  const edgeNum = graph.getEdges().length;\n  console.log('nodeNum:', nodeNum, 'edgeNum:', edgeNum,\n    'should render:', nodeNum + edgeNum, 'rendered:', canvas.getObjects().length);\n}\n","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { computeLayout } from \"../layout/layout\";\nimport { renderGraph } from \"./renderGraph\";\nimport { enablePanZoom } from \"./panZoom\";\n\n\nconst getWindowSize = () => {\n  return {\n    width: window.innerWidth || document.documentElement.clientWidth,\n    height: window.innerHeight || document.documentElement.clientHeight,\n  }\n}\n\n/**\n * Listens to any update of graph, and requests redrawing the canvas.\n */\nexport default class Workspace {\n  constructor(canvas, graph) {\n    this.canvas = canvas;\n    this.graph = graph;\n\n    this._isRedrawPending = false;\n    this._isUsingWorker = false;\n    this._shouldRedrawNext = false;\n  }\n\n  init() {\n    this.resize()\n    this.graph.on('shouldRedraw', () => {\n      this.requestRedraw();\n    })\n    enablePanZoom(this.canvas);\n  }\n\n  /** Set canvas size based on window size. */\n  resize() {\n    const size = getWindowSize();\n    this._setCanvasSize(size);\n    this.requestRedraw()\n  }\n\n  _setCanvasSize(size) {\n    this.canvas.setWidth(size.width);\n    this.canvas.setHeight(size.height);\n  }\n\n  requestRedraw() {\n\n    if (this._isRedrawPending) {\n      // an rAF is already pending, do not request again\n      return;\n    }\n\n    if (this._isUsingWorker) {\n      // while a Web Worker is still computing layout, new updates are made.\n      // Batch them and request another redraw after layouting is complete.\n      this._shouldRedrawNext = true;\n      return;\n    }\n\n    this._isRedrawPending = true;\n\n    requestAnimationFrame(this._relayout.bind(this));\n  }\n\n  /**\n   * Layout graph.\n   * Subsequent relayout requests are skipped if the current one is not complete.\n   */\n  _relayout() {\n    this._isRedrawPending = false;\n\n    // prevent sending to Worker when the previous one does not return\n    if (this._isUsingWorker) {\n      return;\n    }\n    this._isUsingWorker = true;\n\n    console.log('start layout...')\n    this._startLayoutTime = performance.now();\n    computeLayout(this.graph, {\n      marginX: 20,\n      marginY: 20,\n      useWorker: true,\n      callback: this._render.bind(this),\n    });\n  }\n\n  /**\n   * Render graph if layout successfully.\n   * If any updates are made during the layouting, request another redraw.\n   */\n  _render(bbox) {\n    this._isUsingWorker = false;\n\n    if (this._shouldRedrawNext) {\n      this._shouldRedrawNext = false;\n      this.requestRedraw();\n    }\n\n    console.log('finish layout, time spent: ',\n      (performance.now() - this._startLayoutTime) / 1000, 's');\n\n    if (bbox) {\n      // layout successfully\n      console.log('graph dimension', bbox.width, bbox.height);\n      requestAnimationFrame(() => {\n        renderGraph(this.canvas, this.graph)\n      });\n    }\n    console.log('redraw...')\n  }\n\n}\n","\n/**\n * Enable Pan Zoom by drag and mousewheel\n * @credit inspired by http://fabricjs.com/fabric-intro-part-5\n * @param {!fabric.Canvas} canvas \n */\nexport const enablePanZoom = (canvas) => {\n  canvas.on('mouse:down', function(opt) {\n    var evt = opt.e;\n    this.isDragging = true;\n    this.selection = false;\n    this.lastPosX = evt.clientX;\n    this.lastPosY = evt.clientY;\n  });\n\n  canvas.on('mouse:move', function(opt) {\n    if (this.isDragging) {\n      var e = opt.e;\n      this.viewportTransform[4] += e.clientX - this.lastPosX;\n      this.viewportTransform[5] += e.clientY - this.lastPosY;\n      this.requestRenderAll();\n      this.lastPosX = e.clientX;\n      this.lastPosY = e.clientY;\n    }\n  });\n\n  canvas.on('mouse:up', function(opt) {\n    this.isDragging = false;\n    this.selection = true;\n    if (opt.target) {\n      console.log(opt.target.id);\n      \n    }\n    // after panning, we have to setCoords in order to select objects\n    // @credit: https://stackoverflow.com/a/49850382\n    this.forEachObject(obj => {\n      obj.setCoords();\n    });\n    this.requestRenderAll();\n  });\n\n  canvas.on('mouse:wheel', function(opt) {\n    var delta = opt.e.deltaY;\n    // var pointer = canvas.getPointer(opt.e);\n    var zoom = canvas.getZoom();\n    zoom = zoom - delta/300;\n    if (zoom > 20) zoom = 20;\n    if (zoom < 0.1) zoom = 0.1;\n    canvas.zoomToPoint({ x: opt.e.offsetX, y: opt.e.offsetY }, zoom);\n    opt.e.preventDefault();\n    opt.e.stopPropagation();\n  });\n}","\n/**\n * Supported edge types.\n * @enum {string}\n */\nexport const EdgeTypes = {\n  NODE_TO_NODE: 'NODE_TO_NODE',\n  NODE_TO_PARAM: 'NODE_TO_PARAM'\n}","/**\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport Cell from \"./Cell\";\nimport { EdgeTypes } from \"./EdgeTypes\";\nimport { computeNodeGraphId, computeEdgeLabel, computeOutPortLabel, computeInPortLabel, computeAudioParamPortLabel } from \"./label\";\n\n\nexport default class Edge extends Cell {\n  constructor(message, type) {\n    super();\n\n    this.id = null;\n    this.type = type;\n\n    this.source = null;  // {id: NodeId, port: PortId}\n    this.target = null;  // {id: NodeId, port: PortId}\n\n    this._points = null;  // control points\n\n    this._init(message);\n  }\n\n  getPoints() {\n    return this._points;\n  }\n\n  setPoints(points) {\n    this._points = points;\n  }\n\n  toString() {\n    return [this.id, JSON.stringify(this.source), JSON.stringify(this.target)].join(',')\n  }\n\n  shouldRender() {\n    return !!this._points;\n  }\n\n  _init(message) {\n    const contextId = message.contextId;\n\n    if (!message.sourceNodeId || !message.destinationNodeId) {\n      throw new Error('Undefined node message: ' + JSON.stringify(message));\n    }\n\n    this.source = {\n      id: computeNodeGraphId(contextId, message.sourceNodeId),\n      port: computeOutPortLabel(contextId, message.sourceNodeId, message.fromChannel)\n    }\n\n    if (this.type === EdgeTypes.NODE_TO_NODE) {\n      this.target = {\n        id: computeNodeGraphId(contextId, message.destinationNodeId),\n        port: computeInPortLabel(contextId, message.destinationNodeId, message.toChannel)\n      }\n    } else if (this.type === EdgeTypes.NODE_TO_PARAM) {\n      this.target = {\n        id: computeNodeGraphId(contextId, message.destinationNodeId),\n        port: computeAudioParamPortLabel(contextId, message.destinationNodeId, message.destinationParamName)\n      }\n    } else {\n      throw new Error('Unknown edge type: ' + this.type);\n    }\n\n    this.id = computeEdgeLabel(this.source.port, this.target.port);\n  }\n\n\n}","// Copyright 2019 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport './textSandbox.css'\n\nclass TextSandbox {\n  constructor(elemId) {\n    let elem = document.getElementById(elemId)\n    if (!elem) {\n      elem = document.createElement('div');\n      elem.setAttribute('id', elemId);\n      document.body.appendChild(elem);\n    }\n    this.elem = elem;\n  }\n\n  start(className) {\n    this.elem.classList.add(className);\n  }\n\n  stop(className) {\n    this.elem.classList.remove(className);\n  }\n\n  setText(text) {\n    this.elem.textContent = text;\n  }\n\n  clientWidth() {\n    return this.elem.clientWidth;\n  }\n\n}\n\nexport const textSandbox = new TextSandbox('text-sandbox');\n","/**\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isObject } from \"util\";\nimport { AUDIO_PARAM_RADIUS, INPUT_PORT_RADIUS, LEFT_SIDE_TOP_PADDING, LEFT_TEXT_INDENT, TOTAL_INPUT_PORT_HEIGHT, TOTAL_PARAM_PORT_HEIGHT } from '../ui/graphStyle';\nimport { textSandbox } from \"../ui/textSandbox\";\nimport Collection from \"../util/Collection\";\nimport { computeAudioParamPortLabel, computeInPortLabel, computeOutPortLabel } from \"./label\";\nimport { PortTypes } from './PortTypes';\nimport Node from './Node';\n\nexport default class NodeWithPort extends Node {\n  constructor(message) {\n    super(message);\n\n    this._ports = null;\n\n    this._init(message);\n  }\n\n  getPortById(id) {\n    return this._ports.get(id);\n  }\n\n  getPortsByType(name) {\n    return this._ports.filter(port => port.type === name);\n  }\n\n  getPorts() {\n    return this._ports.values();\n  }\n\n  /**\n   * @param {!NodeCreatedMessage} message \n   */\n  _init(message) {\n\n    const layout = this._computeNodeLayout(message);\n\n    const inputPorts = this._prepareInputPorts(message, layout);\n    const outputPorts = this._prepareOutputPorts(message, layout);\n    const paramPorts = this._prepareParamPorts(message, layout);\n\n    this._ports = this._createPortData(inputPorts.concat(outputPorts, paramPorts));\n\n    this.setSize({\n      width: layout.maxTextLength + LEFT_TEXT_INDENT + 30,\n      height: layout.totalHeight\n    })\n  }\n\n  /**\n   * Use number of inputs, outputs, and AudioParams to compute the layout\n   * for text and ports.\n   * @credit This function is mostly borrowed from Audion/\n   *      `audion.entryPoints.handleNodeCreated_()`.\n   *      https://github.com/google/audion/blob/master/js/entry-points/panel.js\n   */\n  _computeNodeLayout(message) {\n\n    // Even if there are no input ports, leave room for the node label.\n    const inputPortSectionHeight =\n        TOTAL_INPUT_PORT_HEIGHT * Math.max(1, message.numberOfInputs);\n    const paramPortSectionHeight =\n        TOTAL_PARAM_PORT_HEIGHT * message.audioParamNames.length;\n\n    // Use the max of the left and right side heights as the total height.\n    // Include a little padding on the left.\n    const leftSideBottomPadding = message.audioParamNames.length ? 6 : 8;\n    const totalHeight = Math.max(\n        inputPortSectionHeight + paramPortSectionHeight + LEFT_SIDE_TOP_PADDING +\n            leftSideBottomPadding,\n        TOTAL_INPUT_PORT_HEIGHT * message.numberOfOutputs);\n\n    const maxTextLength = this._computeMaxTextLength(message)\n\n    return {\n      inputPortSectionHeight,\n      paramPortSectionHeight,\n      maxTextLength,\n      totalHeight,\n    }\n  }\n\n  _computeMaxTextLength(message) {\n    // Compute the max width. Part of that entails computing the max param label\n    // length. Style the invisible text sandbox so that it accurately sizes text.\n    let maxTextLength = 0;\n    textSandbox.start('audioParamText')\n\n    for (var i = 0; i < message.audioParamNames.length; i++) {\n      // Determine the audio param label max length.\n      textSandbox.setText(message.audioParamNames[i]);\n      maxTextLength = Math.max(\n          maxTextLength, textSandbox.clientWidth());\n    }\n\n    // No longer size the text based on the smaller audio param text font.\n    textSandbox.stop('audioParamText');\n\n    // Determine the would-be length of the node label text.\n    textSandbox.start('nodeText')\n    textSandbox.setText(this.nodeLabel);\n    maxTextLength = Math.max(\n        maxTextLength, textSandbox.clientWidth());\n    textSandbox.stop('nodeText');\n    \n    return maxTextLength;\n  }\n\n  _prepareInputPorts(message, layout) {\n    const ports = [];\n    let inputPortY = INPUT_PORT_RADIUS + LEFT_SIDE_TOP_PADDING;\n    for (let i = 0; i < message.numberOfInputs; i++) {\n      ports.push({\n        'id': computeInPortLabel(message.contextId, message.nodeId, i),\n        'type': PortTypes.IN,\n        'text': ''+i,\n        'y': inputPortY\n      });\n      inputPortY += TOTAL_INPUT_PORT_HEIGHT\n    }\n    return ports;\n  }\n\n  _prepareOutputPorts(message, layout) {\n    const ports = [];\n    for (let i = 0; i < message.numberOfOutputs; i++) {\n      ports.push({\n        'id': computeOutPortLabel(message.contextId, message.nodeId, i),\n        'type': PortTypes.OUT,\n        'text': ''+i\n      });\n    }\n    return ports;\n  }\n\n  _prepareParamPorts(message, layout) {\n    // Create labels for audio param ports.\n    const ports = [];\n    let audioParamY =\n        layout.inputPortSectionHeight + LEFT_SIDE_TOP_PADDING + AUDIO_PARAM_RADIUS;\n    for (var i = 0; i < message.audioParamNames.length; i++) {\n      ports.push({\n        'id': computeAudioParamPortLabel(\n            message.contextId, message.nodeId, message.audioParamNames[i]),\n        'type': PortTypes.PARAM,\n        'text': message.audioParamNames[i],\n        'y': audioParamY\n      });\n      audioParamY += TOTAL_PARAM_PORT_HEIGHT;\n    }\n\n    return ports\n  }\n\n  _createPortData(ports) {\n    const err = this._validatePorts(ports)\n    if (err.length) {\n      throw new Error(err);\n    }\n\n    return new Collection(ports);\n  }\n\n  _validatePorts(ports) {\n\n    const errorMessages = [];\n    ports.forEach(p => {\n      if (typeof p !== 'object') {\n        errorMessages.push('Invalid port', p);\n      }\n\n      if (!this._isValidPortId(p.id)) {\n        errorMessages.push('port id is required')\n      }\n    })\n\n    return errorMessages;\n  }\n\n  _isValidPortId(id) {\n    return id !== null && id !== undefined && !isObject(id);\n  }\n\n\n}","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst toggleBtn = document.getElementById('toggle-iframe');\nconst iframe = document.getElementById('demo-iframe');\n\nexport const initIframeHandler = () => {\n  toggleBtn.addEventListener('click', () => {\n    if (!iframe.classList.contains('show')) {\n      iframe.classList.remove('hide')\n      iframe.classList.add('show');\n    } else {\n      iframe.classList.remove('show');\n      iframe.classList.add('hide')\n    }\n  })\n}\n","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport './index.css';\nimport { fabric } from 'fabric';\nimport Graph from './graph/Graph';\nimport Workspace from './ui/Workspace';\nimport { startListening } from './messaging/startListening';\nimport { initIframeHandler } from './iframe/iframeHandler';\n\nconst canvas = new fabric.Canvas('root', { selection: false });\nconst graph = new Graph();\nconst ws = new Workspace(canvas, graph);\n\nwindow.addEventListener('load', () => {\n  ws.init();\n});\nwindow.addEventListener('resize', () => {\n  ws.resize();\n});\n\nstartListening(graph);\ninitIframeHandler();\n"],"sourceRoot":""}